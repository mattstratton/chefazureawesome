<IfModule mod_ssl.c>
  #
  # Pseudo Random Number Generator (PRNG):
  # Configure one or more sources to seed the PRNG of the SSL library.
  # The seed data should be of good random quality.
  # WARNING! On some platforms /dev/random blocks if not enough entropy
  # is available. This means you then cannot use the /dev/random device
  # because it would lead to very long connection times (as long as
  # it requires to make more entropy available). But usually those
  # platforms additionally provide a /dev/urandom device which doesn't
  # block. So, if available, use this one instead. Read the mod_ssl User
  # Manual for more details.
  #
  SSLRandomSeed startup builtin
  SSLRandomSeed startup file:/dev/urandom 512
  SSLRandomSeed connect builtin
  SSLRandomSeed connect file:/dev/urandom 512

  ##
  ##  SSL Global Context
  ##
  ##  All SSL configuration in this context applies both to
  ##  the main server and all SSL-enabled virtual hosts.
  ##

  #
  #   Some MIME-types for downloading Certificates and CRLs
  #
  AddType application/x-x509-ca-cert .crt
  AddType application/x-pkcs7-crl    .crl

  #   Pass Phrase Dialog:
  #   Configure the pass phrase gathering process.
  #   The filtering dialog program (`builtin' is a internal
  #   terminal dialog) has to provide the pass phrase on stdout.
<% if %w[ubuntu].include?(node['platform']) && node['apache']['version'] == '2.4' -%>
  SSLPassPhraseDialog exec:/usr/share/apache2/ask-for-passphrase
<% else -%>
  SSLPassPhraseDialog  builtin
<% end -%>

  #   Inter-Process Session Cache:
  #   Configure the SSL Session Cache: First the mechanism
  #   to use and second the expiring timeout (in seconds).
  #SSLSessionCache         dbm:/var/run/apache2/ssl_scache
  <% if %w[rhel fedora suse].include?(node['platform_family']) -%>
  SSLSessionCache        shmcb:/var/cache/mod_ssl/scache(512000)
  <% elsif %w[freebsd].include?(node['platform_family']) -%>
  SSLSessionCache        shmcb:/var/run/ssl_scache(512000)
  <% else -%>
  SSLSessionCache        shmcb:/var/run/apache2/ssl_scache
  <% end -%>
  SSLSessionCacheTimeout  300

<% if node['apache']['version'] != '2.4' -%>
  #   Semaphore:
  #   Configure the path to the mutual exclusion semaphore the
  #   SSL engine uses internally for inter-process synchronization.
  <% if %w[rhel fedora suse].include?(node['platform_family']) -%>
  SSLMutex  default
  <% elsif %w[freebsd].include?(node['platform_family']) -%>
  SSLMutex  file:/var/run/ssl_mutex
  <% else -%>
  SSLMutex  file:/var/run/apache2/ssl_mutex
  <% end -%>
<% end -%>

  #   SSL Cipher Suite:
  #   List the ciphers that the client is permitted to negotiate.
  #   See the mod_ssl documentation for a complete list.
  #   enable only secure ciphers:
  SSLCipherSuite <%= node['apache']['mod_ssl']['cipher_suite'] %>

  #   Speed-optimized SSL Cipher configuration:
  #   If speed is your main concern (on busy HTTPS servers e.g.),
  #   you might want to force clients to specific, performance
  #   optimized ciphers. In this case, prepend those ciphers
  #   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.
  #   Caveat: by giving precedence to RC4-SHA and AES128-SHA
  #   (as in the example below), most connections will no longer
  #   have perfect forward secrecy - if the server's key is
  #   compromised, captures of past or future traffic must be
  #   considered compromised, too.
  #SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5
  SSLHonorCipherOrder On

  #   The protocols to enable.
  #   Available values: all, SSLv3, TLSv1, TLSv1.1, TLSv1.2
  #   SSL v2  is no longer supported
<% if node['apache']['version'] == '2.4' -%>
  SSLProtocol all
<% else -%>
  SSLProtocol all -SSLv2
<% end -%>

  #   Allow insecure renegotiation with clients which do not yet support the
  #   secure renegotiation protocol. Default: Off
  #SSLInsecureRenegotiation on

  #   Whether to forbid non-SNI clients to access name based virtual hosts.
  #   Default: Off
  #SSLStrictSNIVHostCheck On
</IfModule>
